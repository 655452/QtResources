// import QtQuick 2.15
// import QtQuick.Controls 2.15

// ApplicationWindow {
//     visible: true
//     width: 300
//     height: 200
//     color:"gray"

// Rectangle{
//  width:300
//  height:parent.height
//  color:"transparent"
//  anchors.right:parent.right
//  border.width:1
//  Column{
//      anchors.fill:parent
//      spacing:10

//      MyExpandableSection {
//          id: expandableSection
//          width: parent.width
//          title:"Tag 1"
//         onRequestAdditionalContent: sidePanel.showFor(expandableSection)
//      }

//      MyExpandableSection {
//          // id: expandableSection
//          width: parent.width
//          title:"Tag 1"
//      }

//      MyExpandableSection {
//          // id: expandableSection
//          width: parent.width
//          title:"Tag 1"
//      }
//  }

//  // Side popup panel
//  AdditionalSidePanel {
//      id: sidePanel
//      visible: false
//  }

// }





// }

// ------------------------notifications-------------------------
import QtQuick 2.15
import QtQuick.Window 2.15
import QtQuick.Controls 2.15
import QtQuick 2.15
import QtQuick.Window 2.15
import QtQuick.Controls 2.15

import QtQuick 2.15
import QtQuick.Window 2.15
import QtQuick.Controls 2.15
import QtQuick.Layouts 1.15

ApplicationWindow {
    id: window
    visible: true
    width: 360
    height: 640
    title: "Notification Stack"
    color: "#222"

    property bool expanded: false
    property int visibleCount: expanded ? 3 : 1

    ListModel {
        id: noticeModel
        ListElement { title: "System notice"; time: "10:00 AM" }
        ListElement { title: "New notice"; time: "10:05 AM" }
        ListElement { title: "Battery notice"; time: "10:15 AM" }
        ListElement { title: "Download notice"; time: "10:20 AM" }
        ListElement { title: "Meeting notice"; time: "10:30 AM" }
        ListElement { title: "Weather notice"; time: "10:35 AM" }
        ListElement { title: "Flight notice"; time: "10:45 AM" }
        ListElement { title: "New update"; time: "11:00 AM" }
    }


    property var notifications: {
        "notice":noticeModel,
        "warnings":warningModel,
        "alert":aleartModel
    }


    ListModel {
        id: warningModel

        ListElement{ title: "System Update"; time: "10:00 AM" }
        ListElement{ title: "New Message"; time: "10:05 AM" }
        ListElement{ title: "Battery Low"; time: "10:15 AM" }
        ListElement{ title: "Download Complete"; time: "10:20 AM" }
        ListElement{ title: "Meeting Reminder"; time: "10:30 AM" }
        ListElement{ title: "Weather Alert"; time: "10:35 AM" }
        ListElement{ title: "Flight Delay"; time: "10:45 AM" }
        ListElement{ title: "New Offer"; time: "11:00 AM" }
        ListElement{ title: "Missed Call"; time: "11:10 AM" }

    }

    ListModel {
        id: aleartModel

        ListElement{ title: "System Update"; time: "10:00 AM" }
        ListElement{ title: "New Message"; time: "10:05 AM" }
        ListElement{ title: "Battery Low"; time: "10:15 AM" }
        ListElement{ title: "Download Complete"; time: "10:20 AM" }
        ListElement{ title: "Meeting Reminder"; time: "10:30 AM" }
        ListElement{ title: "Weather Alert"; time: "10:35 AM" }
        ListElement{ title: "Flight Delay"; time: "10:45 AM" }
        ListElement{ title: "New Offer"; time: "11:00 AM" }
        ListElement{ title: "Missed Call"; time: "11:10 AM" }

    }

    Item {
        id: stackArea
        anchors.centerIn: parent
        width: 300
        height: 320

        // Notification count bubble
        Rectangle {
            id: noOfNotifications
            width: 30
            height: 30
            radius: width / 2
            color: "#f00"
            border.width: 2
            border.color: "white"
            anchors.top: stackArea.top
            anchors.right: stackArea.right
            anchors.topMargin: -15
            anchors.rightMargin: -15
            z: 1

            Text {
                anchors.centerIn: parent
                text: noticeModel.count
                color: "white"
                font.pixelSize: 12
                font.bold: true
            }
        }
        Row {
            id: topButtons
            spacing: 10
            anchors.top: parent.top
            anchors.right: parent.right
            anchors.topMargin: -40
            anchors.rightMargin: 0

            Rectangle {
                width: 70
                height: 28
                radius: 14
                color: "#555"
                border.color: "#888"
                Text {
                    anchors.centerIn: parent
                    text: expanded ? "Collapse" : "View All"
                    font.pixelSize: 12
                    color: "white"
                }
                MouseArea {
                    anchors.fill: parent
                    onClicked: {
                        expanded = !expanded
                    }
                }
            }

            Rectangle {
                width: 70
                height: 28
                radius: 14
                color: "#c00"
                border.color: "#888"
                Text {
                    anchors.centerIn: parent
                    text: "Clear All"
                    font.pixelSize: 12
                    color: "white"
                }
                MouseArea {
                    anchors.fill: parent
                    onClicked: {
                        // Clear only the current model (change this if switching types)
                        for (let i = noticeModel.count - 1; i >= 0; --i)
                            noticeModel.remove(i)
                    }
                }
            }
        }


        ColumnLayout {
            id: notificationColumn
            anchors.fill: parent
            anchors.margins: 10
            spacing: 10

            Repeater {
                // model: noticeModel
                model:notifications.notice

                Rectangle {
                    property int myIndex: index

                    visible: myIndex < visibleCount  // Only show if within limit

                    width: parent.width
                    height: 80
                    color: "#444"
                    radius: 10
                    border.color: "#888"
                    Layout.alignment: Qt.AlignTop

                    // âœ… Add this ghost stack only inside the first item
                    Item {
                            anchors.top: parent.top
                            anchors.topMargin: 80  // Place just below the main rectangle
                            visible: myIndex === 0 && visibleCount === 1
                            width: parent.width
                            height: 30

                            Repeater {
                                model: 3
                                Rectangle {
                                    width: parent.width - (index * 10)
                                    height: 10
                                    // radius: 6
                                    color: "#88888844"
                                    anchors.horizontalCenter: parent.horizontalCenter
                                    y: index * 6
                                    z: -index - 1
                                    border.color: "#66666666"
                                }
                            }
                        }
                        Column {
                        anchors.fill: parent
                        anchors.margins: 10
                        spacing: 5

                        Row {
                            spacing: 10
                            anchors.left: parent.left
                            anchors.right: parent.right
                            anchors.margins: 0

                            Text {
                                id: noticeTitle
                                text: noticeModel.get(myIndex).title
                                font.pixelSize: 16
                                font.bold: true
                                color: "#fff"
                                Layout.fillWidth: true
                            }

                            Rectangle {
                                id: crossIcon
                                width: 20
                                height: 20
                                radius: width / 2
                                color: "#555"

                                Text {
                                    anchors.centerIn: parent
                                    text: "x"
                                    font.pixelSize: 12
                                    color: "white"
                                }

                                MouseArea {
                                    anchors.fill: parent
                                    preventStealing: true
                                    propagateComposedEvents: false
                                    onClicked: {
                                        mouse.accepted = true
                                        console.log("Deleting index", myIndex)
                                        noticeModel.remove(myIndex)
                                    }
                                }
                            }
                        }

                        Text {
                            text: noticeModel.get(myIndex).time
                            font.pixelSize: 12
                            color: "#bbb"
                        }
                    }

                    MouseArea {
                        anchors.fill: parent
                        z: -1
                        onClicked: {
                            expanded = !expanded
                            console.log("Expanded:", expanded)
                        }
                    }
                }
            }

        }
    }
}import QtQuick 2.15
import QtQuick.Controls 2.15
// import QtQuick.Controls.Styles 1.4
/*
Item {
    id: root
    property string title: "Section"
    property string contentText: ""
    property bool expanded: false
    property string tabColor: ""
    property int rowHeight: 40
    property int baseHeight: 40
    property int visibleTreeRows: 0
    
    implicitHeight: baseHeight + (expanded ?expandableColumn.implicitHeight: 0)
    Column {
        spacing: 4
        width: parent.width
        
        CheckBox {
            id: sectionCheck
            text: title
            checked: root.expanded

            onClicked: root.expanded = checked

            indicator: Rectangle {
                width: 20
                height: 20
                radius: 4
                border.color: "black"
                color: sectionCheck.checked ? "white" : "transparent"
                anchors.verticalCenter: parent.verticalCenter
                x: 10

                Text {
                    anchors.centerIn: parent
                    text: sectionCheck.checked ? "\u2713" : ""
                    color: "black"
                    font.pixelSize: 16
                    font.bold: true
                }
            }

            background: Rectangle {
                color: "transparent"
                width: parent.width
                border.width: 1
                border.color: "white"
            }
        }


        Rectangle {
            width: parent.width
            height: root.expanded ?expandableColumn.implicitHeight : 0
            color: "gray"
            opacity: root.expanded ? 1 : 0
            border.width:1

            
            Behavior on height { NumberAnimation { duration: 200 } }
            Behavior on opacity { NumberAnimation { duration: 200 } }
            Column{
                id:expandableColumn
                Repeater{
                    model:["Combo1","Combo2","Combo3","Combo4"]

                    CheckBox {
                            id: customCheck
                            text: modelData
                            // anchors.centerIn: parent

                            indicator: Rectangle {
                                width: 20
                                height: 20
                                radius: 4
                                border.color: "black"
                                color: customCheck.checked ? "white" : "transparent"
                                anchors.verticalCenter:parent.verticalCenter
                                x:10

                                Text {
                                    anchors.centerIn: parent
                                    text: customCheck.checked ? "\u2713" : ""  // Unicode checkmark âœ“
                                    color: "black"
                                    font.pixelSize: 16
                                    font.bold: true
                                }
                            }
                            background:Rectangle{
                                color:"transparent"
                                width:parent.width
                                border.width:1
                                border.color:"white"
                            }
                        }

                }
            }
        }
    }
}
*/


import QtQuick 2.15
import QtQuick.Controls 2.15

// Item {
//     id: root
//     property string title: "Section"
//     property bool expanded: false

//     implicitHeight: 40+ (expanded ? expandableColumn.implicitHeight : 0)

//     Column {
//         width: parent.width
//         spacing: 4

//         // HEADER SECTION (Clickable CheckBox)
//         CheckBox {
//             id: headerCheck
//             text:root.title
//             width: parent.width
//             checked: expanded
//             onClicked: expanded = checked
//             height:40
//             // indicator: Item {}
//             /*
//             contentItem: Row {
//                 spacing: 10
//                 anchors.verticalCenter: parent.verticalCenter
//                 padding: 10

//                 Rectangle {
//                     width: 20
//                     height: 20
//                     radius: 4
//                     border.color: "black"
//                     color: headerCheck.checked ? "white" : "transparent"

//                     Text {
//                         anchors.centerIn: parent
//                         text: headerCheck.checked ? "\u2713" : ""
//                         color: "black"
//                         font.pixelSize: 16
//                         font.bold: true
//                     }
//                 }

//                 Text {
//                     text: root.title
//                     color: "white"
//                     font.pixelSize: 16
//                 }
//             }
//             */
//             background: Rectangle {
//                 color: "transparent"
//                 border.width: 1
//                 border.color: "white"
//             }
//         }

//         // EXPANDABLE SECTION
//         Rectangle {
//             width: parent.width
//             height: expanded ? expandableColumn.implicitHeight : 0
//             opacity: expanded ? 1 : 0
//             color: "gray"
//             border.width: 1

//             Behavior on height { NumberAnimation { duration: 200 } }
//             Behavior on opacity { NumberAnimation { duration: 200 } }

//             Column {
//                 id: expandableColumn
//                 spacing: 4
//                 padding: 4

//                 Repeater {
//                     model: ["Combo1", "Combo2", "Combo3", "Combo4"]

//                     CheckBox {
//                         text: modelData
//                         width:parent.width
// indicator: Item {}
//                         contentItem: Row {
//                             spacing: 10
//                             anchors.verticalCenter: parent.verticalCenter
//                             // width:parent.width
//                             Rectangle {
//                                 width: 20
//                                 height: 20
//                                 radius: 4
//                                 border.color: "black"
//                                 color: checked ? "white" : "transparent"

//                                 Text {
//                                     anchors.centerIn: parent
//                                     text: checked ? "\u2713" : ""
//                                     color: "black"
//                                     font.pixelSize: 16
//                                     font.bold: true
//                                 }
//                             }

//                             Text {
//                                 text: modelData
//                                 color: "white"
//                             }
//                         }

//                         background: Rectangle {
//                             color: "transparent"
//                             border.width: 1
//                             border.color: "white"
//                         }
//                     }
//                 }
//             }
//         }
//     }
// }


Item {
    id: root
    width: parent ? parent.width : 300
    property string title: "Section"
    property bool expanded: false

    property bool additionalExpanded: false
    signal requestAdditionalContent(Item sectionItem)

    // border.width:1
    // color:"transparent"


    // Final height depends on header + expanded section
    height: headerCheck.height + (expanded ?expandableContent.height + 10  : 0)

    Behavior on height {
        NumberAnimation { duration: 200
        }
    }
    Column {
        id:expandableSection
        width: parent.width
        spacing: 4

        // HEADER SECTION (Clickable CheckBox)
        CheckBox {
            id: headerCheck
            width: parent.width
            checked: expanded
            onClicked: {
                console.log(" checked " + headerCheck.checked)
                expanded = headerCheck.checked
            }

            indicator: Item {}
            contentItem: Row {
                spacing: 10
                padding: 10
                height: 40
                width: parent.width

                Rectangle {
                    width: 20
                    height: 20
                    radius: 4
                    border.color: "black"
                    color: headerCheck.checked ? "white" : "transparent"

                    Text {
                        anchors.centerIn: parent
                        text: headerCheck.checked ? "\u2713" : ""
                        color: "black"
                        font.pixelSize: 16
                        font.bold: true
                    }
                }

                Text {
                    text: root.title
                    color: "white"
                    font.pixelSize: 16
                }
            }

            background: Rectangle {
                color: "transparent"
                border.width: 1
                border.color: "white"
            }
        }


        // EXPANDABLE SECTION
        Rectangle {
            id: expandableContent
            width: parent.width - 10
            height: expanded ? expandableColumn.implicitHeight + 12 : 0
            visible: expanded
            opacity: expanded ? 1 : 0
            color: "transparent"
            // border.width: 1

            Behavior on opacity { NumberAnimation { duration: 200 } }

            Column {
                id: expandableColumn
                width: parent.width
                spacing: 4
                padding: 6

                Item {
                    id: additionalToggleRow
                    width: parent.width
                    height: 40

                    MouseArea {
                        anchors.fill: parent
                        onClicked:{
                            additionalExpanded = !additionalExpanded
                            if (additionalExpanded)
                                root.requestAdditionalContent(root) // notify parent
                        }
                        cursorShape: Qt.PointingHandCursor
                    }

                    Row {
                        spacing: 10
                        anchors.fill: parent
                        anchors.leftMargin: 10
                        anchors.rightMargin: 10
                        anchors.verticalCenter: parent.verticalCenter

                        Text {
                            text: "Additional Parameters"
                            color: "white"
                            font.pixelSize: 16
                        }
                        Rectangle {
                            width: 20
                            height: 20
                            radius: 4
                            border.color: "white"
                            color: "transparent"

                            Text {
                                anchors.centerIn: parent
                                text: additionalExpanded ? "\u2212" : "+" // Minus or Plus
                                color: "white"
                                font.pixelSize: 16
                                font.bold: true
                            }
                        }


                    }
                }
              Rectangle {
                    id: additionalContent
                    width: parent.width
                    height: additionalExpanded ? additionalColumn.implicitHeight + 12 : 0
                    opacity: additionalExpanded ? 1 : 0
                    color: "#333"
                    clip: true

                    Behavior on height { NumberAnimation { duration: 200 } }
                    Behavior on opacity { NumberAnimation { duration: 200 } }

                    Column {
                        id: additionalColumn
                        width: parent.width
                        spacing: 12
                        padding: 10

                        Repeater {
                            model: ["Parameter A", "Parameter B", "Parameter C", "Parameter D"]

                            Column {
                                spacing: 4
                                width: parent.width

                                Text {
                                    text: modelData
                                    color: "white"
                                    font.pixelSize: 14
                                }

                                Row {
                                    spacing: 20
                                    width: parent.width

                                    // === Min SpinBox ===

                                        Text {
                                            text: "Min"
                                            color: "white"
                                            font.pixelSize: 12
                                            anchors.verticalCenter: parent.verticalCenter
                                        }

                                        SpinBox {
                                            id: minSpin
                                            width: 100
                                            from: 0
                                            to: 100
anchors.verticalCenter: parent.verticalCenter
                                            background:Rectangle{
                                                color:"transparent"
                                                border.width:1
                                                border.color:"#373737"
                                            }

                                            // remove default indicators
                                            up.indicator: null
                                            down.indicator: null

                                            contentItem: Row {
                                                spacing: 4
                                                Rectangle {
                                                    width: 20
                                                    height: 20
                                                    color: "#555"
                                                    radius: 4
                                                    MouseArea {
                                                        anchors.fill: parent
                                                        onClicked: minSpin.value--
                                                    }
                                                    Text {
                                                        anchors.centerIn: parent
                                                        text: "-"
                                                        color: "white"
                                                        font.pixelSize: 14
                                                    }
                                                }

                                                Text {
                                                    text: minSpin.value
                                                    color: "white"
                                                    font.pixelSize: 14
                                                    width: 40
                                                    horizontalAlignment: Text.AlignHCenter
                                                    verticalAlignment: Text.AlignVCenter
                                                }

                                                Rectangle {
                                                    width: 20
                                                    height: 20
                                                    color: "#555"
                                                    radius: 4
                                                    MouseArea {
                                                        anchors.fill: parent
                                                        onClicked: minSpin.value++
                                                    }
                                                    Text {
                                                        anchors.centerIn: parent
                                                        text: "+"
                                                        color: "white"
                                                        font.pixelSize: 14
                                                    }
                                                }
                                            }
                                        }


                                    // === Max SpinBox ===

                                        Text {
                                            text: "Max"
                                            color: "white"
                                            font.pixelSize: 12
                                            anchors.verticalCenter: parent.verticalCenter
                                        }

                                        SpinBox {
                                            id: maxSpin
                                            width: 100
                                            from: 0
                                            to: 100
                                            anchors.verticalCenter: parent.verticalCenter

                                            up.indicator: null
                                            down.indicator: null

                                            background:Rectangle{
                                                color:"transparent"
                                                border.width:1
                                                border.color:"#373737"
                                            }

                                            contentItem: Row {
                                                spacing: 4
                                                Rectangle {
                                                    width: 20
                                                    height: 20
                                                    color: "#555"
                                                    radius: 4
                                                    MouseArea {
                                                        anchors.fill: parent
                                                        onClicked: maxSpin.value--
                                                    }
                                                    Text {
                                                        anchors.centerIn: parent
                                                        text: "-"
                                                        color: "white"
                                                        font.pixelSize: 14
                                                    }
                                                }

                                                Text {
                                                    text: maxSpin.value
                                                    color: "white"
                                                    font.pixelSize: 14
                                                    width: 40
                                                    horizontalAlignment: Text.AlignHCenter
                                                    verticalAlignment: Text.AlignVCenter
                                                }

                                                Rectangle {
                                                    width: 20
                                                    height: 20
                                                    color: "#555"
                                                    radius: 4
                                                    MouseArea {
                                                        anchors.fill: parent
                                                        onClicked: maxSpin.value++
                                                    }
                                                    Text {
                                                        anchors.centerIn: parent
                                                        text: "+"
                                                        color: "white"
                                                        font.pixelSize: 14
                                                    }
                                                }
                                            }
                                        }

                                }
                            }
                        }
                    }
                }

                Repeater {
                    model: ["Combo1", "Combo2", "Combo3", "Combo4"]

                    CheckBox {
                        width: parent.width
                        text: modelData

                        indicator: Item {}
                        contentItem: Row {
                            spacing: 10
                            height: 30

                            Rectangle {
                                width: 20
                                height: 20
                                radius: 4
                                border.color: "black"
                                color: checked ? "white" : "transparent"

                                Text {
                                    anchors.centerIn: parent
                                    text: checked ? "\u2713" : ""
                                    color: "black"
                                    font.pixelSize: 14
                                    font.bold: true
                                }
                            }

                            Text {
                                text: modelData
                                color: "white"
                            }
                        }

                        background: Rectangle {
                            color: "transparent"
                            border.width: 1
                            border.color: "white"
                        }
                    }
                }
            }
        }
    }

    Rectangle{
        width:200
        height:parent.height
        anchors.right:expandableSection.left
        anchors.bottom:expandableSection.bottom
        anchors.rightMargin:10



        Dial {
            id: control
            // snapMode:Dial.SnapAlway
            background: Rectangle {
                x: control.width / 2 - width / 2
                y: control.height / 2 - height / 2
                implicitWidth: 140
                implicitHeight: 140
                width: Math.max(64, Math.min(control.width, control.height))
                height: width
                color: "transparent"
                radius: width / 2
                border.color: control.pressed ? "#17a81a" : "#21be2b"
                opacity: control.enabled ? 1 : 0.3
            }


            handle: Rectangle {
                id: handleItem
                x: control.background.x + control.background.width / 2 - width / 2
                y: control.background.y + control.background.height / 2 - height / 2
                width: 16
                height: 16
                color: control.pressed ? "#17a81a" : "#21be2b"
                radius: 8
                antialiasing: true
                opacity: control.enabled ? 1 : 0.3
                transform: [
                    Translate {
                        y: -Math.min(control.background.width, control.background.height) * 0.4 + handleItem.height / 2
                    },
                    Rotation {
                        angle: control.angle
                        origin.x: handleItem.width / 2
                        origin.y: handleItem.height / 2
                    }
                ]
            }
        }


    }
}


/*
Item {
    id: root
    width: parent ? parent.width : 300
    property string title: "Section"
    property bool expanded: false
    property bool additionalExpanded: false

    // Total height dynamically adjusts based on expanded states
    height: headerCheck.height +
            additionalToggleRow.height +
            (additionalExpanded ? additionalContent.height : 0) +
            (expanded ? expandableContent.height + 10 : 0)

    Behavior on height {
        NumberAnimation { duration: 200 }
    }

    Column {
        id: expandableSection
        width: parent.width
        spacing: 4

        // === HEADER SECTION ===
        CheckBox {
            id: headerCheck
            width: parent.width
            checked: expanded
            onClicked: expanded = checked

            indicator: Item {}
            contentItem: Row {
                spacing: 10
                padding: 10
                height: 40
                width: parent.width

                Rectangle {
                    width: 20
                    height: 20
                    radius: 4
                    border.color: "black"
                    color: headerCheck.checked ? "white" : "transparent"

                    Text {
                        anchors.centerIn: parent
                        text: headerCheck.checked ? "\u2713" : ""
                        color: "black"
                        font.pixelSize: 16
                        font.bold: true
                    }
                }

                Text {
                    text: root.title
                    color: "white"
                    font.pixelSize: 16
                }
            }

            background: Rectangle {
                color: "transparent"
                border.width: 1
                border.color: "white"
            }
        }

        // === ADDITIONAL PARAMETERS TOGGLE ===
        Item {
            id: additionalToggleRow
            width: parent.width
            height: 40

            MouseArea {
                anchors.fill: parent
                onClicked: additionalExpanded = !additionalExpanded
                cursorShape: Qt.PointingHandCursor
            }

            Row {
                spacing: 10
                anchors.fill: parent
                anchors.leftMargin: 10
                anchors.rightMargin: 10
                anchors.verticalCenter: parent.verticalCenter

                Rectangle {
                    width: 20
                    height: 20
                    radius: 4
                    border.color: "white"
                    color: "transparent"

                    Text {
                        anchors.centerIn: parent
                        text: additionalExpanded ? "\u2212" : "+" // Minus or Plus
                        color: "white"
                        font.pixelSize: 16
                        font.bold: true
                    }
                }

                Text {
                    text: "Additional Parameters"
                    color: "white"
                    font.pixelSize: 16
                }
            }
        }

        // === ADDITIONAL PARAMETERS EXPANDABLE CONTENT ===
        Rectangle {
            id: additionalContent
            width: parent.width - 10
            height: additionalExpanded ? additionalColumn.implicitHeight + 12 : 0
            opacity: additionalExpanded ? 1 : 0
            color: "#333"
            clip: true

            Behavior on height { NumberAnimation { duration: 200 } }
            Behavior on opacity { NumberAnimation { duration: 200 } }

            Column {
                id: additionalColumn
                width: parent.width
                spacing: 4
                padding: 6

                Text {
                    text: "Parameter A"
                    color: "white"
                }

                Text {
                    text: "Parameter B"
                    color: "white"
                }

                Text {
                    text: "Parameter C"
                    color: "white"
                }
            }
        }

        // === MAIN EXPANDABLE SECTION ===
        Rectangle {
            id: expandableContent
            width: parent.width - 10
            height: expanded ? expandableColumn.implicitHeight + 12 : 0
            visible: expanded
            opacity: expanded ? 1 : 0
            color: "transparent"
            clip: true

            Behavior on opacity { NumberAnimation { duration: 200 } }

            Column {
                id: expandableColumn
                width: parent.width
                spacing: 4
                padding: 6

                Repeater {
                    model: ["Combo1", "Combo2", "Combo3", "Combo4"]

                    CheckBox {
                        width: parent.width
                        text: modelData

                        indicator: Item {}
                        contentItem: Row {
                            spacing: 10
                            height: 30

                            Rectangle {
                                width: 20
                                height: 20
                                radius: 4
                                border.color: "black"
                                color: checked ? "white" : "transparent"

                                Text {
                                    anchors.centerIn: parent
                                    text: checked ? "\u2713" : ""
                                    color: "black"
                                    font.pixelSize: 14
                                    font.bold: true
                                }
                            }

                            Text {
                                text: modelData
                                color: "white"
                            }
                        }

                        background: Rectangle {
                            color: "transparent"
                            border.width: 1
                            border.color: "white"
                        }
                    }
                }
            }
        }
    }
}
*/
